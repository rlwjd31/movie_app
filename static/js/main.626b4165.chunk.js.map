{"version":3,"sources":["component/Movie.js","routes/Home.js","routes/About.js","routes/Detail.js","component/Navigation.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","to","pathname","state","src","alt","map","genre","index","slice","Home","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","React","Component","About","props","Detail","location","history","undefined","push","Navigation","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8UAwDeA,MAjDf,YAA8D,IAA7CC,EAA4C,EAA5CA,GAAIC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC/C,OACI,qBAAKC,UAAU,QAAf,SACI,eAAC,IAAD,CACIC,GAAI,CACAC,SAAS,UAAD,OAAYR,GACpBS,MAAO,CACHR,OACAC,QACAC,UACAC,SACAC,WARZ,UAYI,qBAAKK,IAAKN,EAAQO,IAAKT,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,gBAAd,SACKD,EAAOO,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAgBR,UAAU,gBAA1B,SACKO,GADIC,QAKjB,oBAAGR,UAAU,iBAAb,UAA+BH,EAAQY,MAAM,EAAG,KAAhD,kBCgCLC,G,kNA3DXP,MAAQ,CACJQ,WAAW,EACXC,OAAQ,I,EAGZC,U,sBAAY,8BAAAC,EAAA,sEAWEC,IAAMC,IAAI,4DAXZ,gBASQJ,EATR,EAQJK,KACIA,KAAQL,OAOhBM,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CAAER,SAAQD,WAAW,IAjB3B,2C,uDAoBZ,WACIU,KAAKR,c,oBAGT,WACI,MAA8BQ,KAAKlB,MAA3BQ,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OACnB,OACI,yBAASZ,UAAU,YAAnB,SACKW,EACG,qBAAKX,UAAU,SAAf,SACI,sBAAMA,UAAU,eAAhB,0BAGJ,qBAAKA,UAAU,SAAf,SACKY,EAAON,KAAI,SAACgB,GACT,OACI,cAAC,EAAD,CAEI5B,GAAI4B,EAAM5B,GACVC,KAAM2B,EAAM3B,KACZC,MAAO0B,EAAM1B,MACbC,QAASyB,EAAMzB,QACfC,OAAQwB,EAAMC,mBACdxB,OAAQuB,EAAMvB,QANTuB,EAAM5B,e,GA3C5B8B,IAAMC,Y,MCWVC,MAbf,SAAeC,GAEX,OADAT,QAAQC,IAAIQ,GAER,sBAAK3B,UAAU,mBAAf,UACI,gJAIA,kECSG4B,E,uKAjBX,WACI,MAA8BP,KAAKM,MAA3BE,EAAR,EAAQA,SAAUC,EAAlB,EAAkBA,aACKC,IAAnBF,EAAS1B,OACT2B,EAAQE,KAAK,O,oBAIrB,WACI,IAAQH,EAAaR,KAAKM,MAAlBE,SACR,OAAIA,EAAS1B,MACF,+BAAO0B,EAAS1B,MAAMP,QAEtB,S,GAbE4B,IAAMC,WCWZQ,MATf,WACI,OACI,gCACI,cAAC,IAAD,CAAMhC,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,uB,MCuBGiC,MAvBf,WACI,OACI,eAAC,IAAD,WAaI,cAAC,EAAD,IACA,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW3B,IACxC,cAAC,IAAD,CAAOyB,KAAK,SAASE,UAAWX,IAChC,cAAC,IAAD,CAAOS,KAAK,aAAaE,UAAWT,QCpBhDU,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.626b4165.chunk.js","sourcesContent":["// Movie.js는 동적 data를 다루지 않으므로(state를 다룰 필요가 없다.) function component를 활용한다.\r\n\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <Link\r\n                to={{\r\n                    pathname: `/movie/${id}`,\r\n                    state: {\r\n                        year,\r\n                        title,\r\n                        summary,\r\n                        poster,\r\n                        genres,\r\n                    },\r\n                }}\r\n            >\r\n                <img src={poster} alt={title} title={title} />\r\n                <div className=\"movie__data\">\r\n                    <h3 className=\"movie__title\">{title}</h3>\r\n                    <h5 className=\"movie__year\">{year}</h5>\r\n                    <ul className=\"movie__genres\">\r\n                        {genres.map((genre, index) => (\r\n                            <li key={index} className=\"genres__genre\">\r\n                                {genre}\r\n                            </li>\r\n                        ))}\r\n                    </ul>\r\n                    <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\r\n                    {/* \r\n                    style component 사용(아래 참조)\r\n                    <h3 class=\"movie__title\" style={{backgroundColor: \"red\"}}>{title}</h3>\r\n                    와 같이 하지만 선호하지는 않으면 Movie.css 파일에서 css를 구현하자!!\r\n                    */}\r\n                </div>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    // medium_cover_image\r\n    poster: PropTypes.string.isRequired,\r\n    // 배열안에 있는 data type이 string이여야 한다는 건가...?\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Movie from \"../component/Movie\";\r\nimport \"./Home.css\";\r\n\r\nclass Home extends React.Component {\r\n    state = {\r\n        isLoading: true,\r\n        movies: [],\r\n    };\r\n\r\n    getMovies = async () => {\r\n        // es6에서는 아래 code처럼 하지 않는다.\r\n        // const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\r\n        // console.log(movies.data.data.movies);\r\n\r\n        // es6 version\r\n        // api refer를 보면 param을 볼 수 있는데 평점을 기준으로 정렬하는 것이 있다.\r\n        const {\r\n            data: {\r\n                data: { movies },\r\n            },\r\n        } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\r\n        // 1번 째 movies는 state의 movies이고 2번 째 movies는 const movies이다.\r\n        // this.setState({movies: movies})\r\n        // 위의 code는 아래와 같이 할 수 있다.\r\n        // this.setState({movies});\r\n        console.log(movies);\r\n        this.setState({ movies, isLoading: false });\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getMovies();\r\n    }\r\n\r\n    render() {\r\n        const { isLoading, movies } = this.state;\r\n        return (\r\n            <section className=\"container\">\r\n                {isLoading ? (\r\n                    <div className=\"loader\">\r\n                        <span className=\"loader__text\">Loading...</span>\r\n                    </div>\r\n                ) : (\r\n                    <div className=\"movies\">\r\n                        {movies.map((movie) => {\r\n                            return (\r\n                                <Movie\r\n                                    key={movie.id}\r\n                                    id={movie.id}\r\n                                    year={movie.year}\r\n                                    title={movie.title}\r\n                                    summary={movie.summary}\r\n                                    poster={movie.medium_cover_image}\r\n                                    genres={movie.genres}\r\n                                />\r\n                            );\r\n                        })}\r\n                    </div>\r\n                )}\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n\r\n// data를 fetch하는 것은 fetch()를 사용하면 되지만 axios로 진행한다.\r\n// axios는 마치 fetch위에 있는 작은 layer와 같은 존재이다.\r\n// axios를 사용하기 위해서는 npm install axios를 해야한다.\r\n\r\n// axios.get()은 오래 걸리기 때문에 js에게 끝날때까지 기다리라고 알려주어야 한다.\r\n// await를 이용하는데 await axios.get(\"https://yts-proxy.now.sh/list_movies.json\")와 같다.\r\n// await를 하기 위해서는 async를 써주어야 한다. async를 이용해 await를 하면 javascript는 axios.get()이 끝날때까지 기다려준다.\r\n","import React from \"react\";\r\nimport \"./About.css\";\r\n\r\nfunction About(props) {\r\n    console.log(props);\r\n    return (\r\n        <div className=\"about__container\">\r\n            <span>\r\n                “Freedom is the freedom to say that two plus two make four. If that is granted, all\r\n                else follows.”\r\n            </span>\r\n            <span>− George Orwell, 1984</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default About;\r\n","import React from \"react\";\r\n\r\nclass Detail extends React.Component {\r\n    componentDidMount() {\r\n        const { location, history } = this.props;\r\n        if (location.state === undefined) {\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { location } = this.props;\r\n        if (location.state) {\r\n            return <span>{location.state.title}</span>;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Detail;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Navigation 밖에서는 동작하지 않으므로 Navigation component밑에 선언해 주어야 한다.\r\nfunction Navigation() {\r\n    return (\r\n        <div>\r\n            <Link to=\"/\">Home</Link>\r\n            <Link to=\"/about\">About</Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Navigation;\r\n","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport About from \"./routes/About\";\nimport Detail from \"./routes/Detail\";\nimport Navigation from \"./component/Navigation\";\nimport \"./App.css\";\n\nfunction App() {\n    return (\n        <HashRouter>\n            {/* \n                /about으로 가면 About.js로 가라!!\n                http://localhost:3000/movie_app#/about ->와 같이 쓴다.\n                <Route path=\"/\" component={Home} />\n                <Route path=\"/about\" component={About} /> \n                하지만 위에 2개를 HashRouter안에 넣게되면, 2개가 동시에 rendering 되므로\n                about page로 가게 되면 home과 about page가 둘 다 동시에 rendering되는 문제가 생겨\n                아래와 같이 하는 것이 좋다. --> exact 옵션을 true로 준다.\n             */}\n            {/* <Navigation />\n            <Route path=\"/\" exact={true} component={Home} />\n            <Route path=\"/about\" component={About} /> */}\n            <Navigation />\n            <Route path=\"/\" exact={true} component={Home} />\n            <Route path=\"/about\" component={About} />\n            <Route path=\"/movie/:id\" component={Detail} />\n        </HashRouter>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import Potatoa from './Potato';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* 밑에 <App />는 우리가 component를 사용하고자 할 때, component의 형태이다. */}\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// React는 component를 사용해서 HTML처럼 작성하려는 경우에 필요하다.\n// js와 HTML 사이의 이러한 조합을 jsx라고 한다. <App />\n\n// react application이 하나의 component만을 rendering해야한다. 이것이 App이다."],"sourceRoot":""}