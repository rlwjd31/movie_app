{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRA0CeA,MApCf,YAA6D,EAA5CC,GAA6C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC/C,OACI,sBAAKC,UAAU,QAAf,UACI,qBAAKC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IACrC,sBAAKI,UAAU,cAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BJ,IAC9B,oBAAII,UAAU,cAAd,SAA6BL,IAC7B,oBAAIK,UAAU,SAAd,SACKD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,oBAAgBL,UAAU,gBAA1B,SACKI,GADIC,QAKjB,oBAAGL,UAAU,iBAAb,UAA+BH,EAAQS,MAAM,EAAG,KAAhD,gBC6CDC,G,kNA3DXC,MAAQ,CACJC,WAAW,EACXC,OAAQ,I,EAGZC,U,sBAAY,8BAAAC,EAAA,sEAWEC,IAAMC,IAAI,4DAXZ,gBASQJ,EATR,EAQJK,KACIA,KAAQL,OAOhBM,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CAAER,SAAQD,WAAW,IAjB3B,2C,uDAoBZ,WACIU,KAAKR,c,oBAGT,WACI,MAA8BQ,KAAKX,MAA3BC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OACnB,OACI,yBAASV,UAAU,YAAnB,SACKS,EACG,qBAAKT,UAAU,SAAf,SACI,sBAAMA,UAAU,eAAhB,0BAGJ,qBAAKA,UAAU,SAAf,SACKU,EAAOP,KAAI,SAACiB,GACT,OACI,cAAC,EAAD,CAEI1B,GAAI0B,EAAM1B,GACVC,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAMC,mBACdtB,OAAQqB,EAAMrB,QANTqB,EAAM1B,e,GA3C7B4B,IAAMC,YCCxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UAEE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.466ff699.chunk.js","sourcesContent":["// Movie.js는 동적 data를 다루지 않으므로(state를 다룰 필요가 없다.) function component를 활용한다.\r\n\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ id, year, title, summary, poster, genres }) {\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title} title={title} />\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className=\"genres\">\r\n                    {genres.map((genre, index) => (\r\n                        <li key={index} className=\"genres__genre\">\r\n                            {genre}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n                <p className=\"movie__summary\">{summary.slice(0, 140)}...</p>\r\n                {/* \r\n                    style component 사용(아래 참조)\r\n                    <h3 class=\"movie__title\" style={{backgroundColor: \"red\"}}>{title}</h3>\r\n                    와 같이 하지만 선호하지는 않으면 Movie.css 파일에서 css를 구현하자!!\r\n                */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nMovie.propTypes = {\r\n    id: PropTypes.number.isRequired,\r\n    year: PropTypes.number.isRequired,\r\n    title: PropTypes.string.isRequired,\r\n    summary: PropTypes.string.isRequired,\r\n    // medium_cover_image\r\n    poster: PropTypes.string.isRequired,\r\n    // 배열안에 있는 data type이 string이여야 한다는 건가...?\r\n    genres: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n    state = {\n        isLoading: true,\n        movies: [],\n    };\n\n    getMovies = async () => {\n        // es6에서는 아래 code처럼 하지 않는다.\n        // const movies = await axios.get(\"https://yts-proxy.now.sh/list_movies.json\");\n        // console.log(movies.data.data.movies);\n\n        // es6 version\n        // api refer를 보면 param을 볼 수 있는데 평점을 기준으로 정렬하는 것이 있다.\n        const {\n            data: {\n                data: { movies },\n            },\n        } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n        // 1번 째 movies는 state의 movies이고 2번 째 movies는 const movies이다.\n        // this.setState({movies: movies})\n        // 위의 code는 아래와 같이 할 수 있다.\n        // this.setState({movies});\n        console.log(movies);\n        this.setState({ movies, isLoading: false });\n    };\n\n    componentDidMount() {\n        this.getMovies();\n    }\n\n    render() {\n        const { isLoading, movies } = this.state;\n        return (\n            <section className=\"container\">\n                {isLoading ? (\n                    <div className=\"loader\">\n                        <span className=\"loader__text\">Loading...</span>\n                    </div>\n                ) : (\n                    <div className=\"movies\">\n                        {movies.map((movie) => {\n                            return (\n                                <Movie\n                                    key={movie.id}\n                                    id={movie.id}\n                                    year={movie.year}\n                                    title={movie.title}\n                                    summary={movie.summary}\n                                    poster={movie.medium_cover_image}\n                                    genres={movie.genres}\n                                />\n                            );\n                        })}\n                    </div>\n                )}\n            </section>\n        );\n    }\n}\n\nexport default App;\n\n// data를 fetch하는 것은 fetch()를 사용하면 되지만 axios로 진행한다.\n// axios는 마치 fetch위에 있는 작은 layer와 같은 존재이다.\n// axios를 사용하기 위해서는 npm install axios를 해야한다.\n\n// axios.get()은 오래 걸리기 때문에 js에게 끝날때까지 기다리라고 알려주어야 한다.\n// await를 이용하는데 await axios.get(\"https://yts-proxy.now.sh/list_movies.json\")와 같다.\n// await를 하기 위해서는 async를 써주어야 한다. async를 이용해 await를 하면 javascript는 axios.get()이 끝날때까지 기다려준다.\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n// import Potatoa from './Potato';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* 밑에 <App />는 우리가 component를 사용하고자 할 때, component의 형태이다. */}\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// React는 component를 사용해서 HTML처럼 작성하려는 경우에 필요하다.\n// js와 HTML 사이의 이러한 조합을 jsx라고 한다. <App />\n\n// react application이 하나의 component만을 rendering해야한다. 이것이 App이다."],"sourceRoot":""}